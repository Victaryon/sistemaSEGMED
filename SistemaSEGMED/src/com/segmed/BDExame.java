package com.segmed;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Exame generated by hbm2java
 */
@Entity
@Table(name = "EXAME", schema = "SEGMED")
public class BDExame implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int codigoExame;
	private BDClientecolaborador clientecolaborador;
	private BDClientes clientes;
	private Date dataExame;
	private float valorTotal;
	private String tipo;
	private String usuario;
	private Set<BDExameitem> exameitems = new HashSet<BDExameitem>(0);

	public BDExame() {
	}

	public BDExame(int codigoExame) {
		this.codigoExame = codigoExame;
	}
	
	public BDExame(BDClientes clientes,BDClientecolaborador clientecolaborador, Date dataExame, String tipo, String usuario) {
		this.clientecolaborador = clientecolaborador;
		this.clientes = clientes;
		this.dataExame = dataExame;
		this.tipo = tipo;
		this.usuario = usuario;
	}

	public BDExame(int codigoExame, BDClientecolaborador clientecolaborador, BDClientes clientes, Date dataExame,
			float valorTotal, String tipo, String usuario, Set<BDExameitem> exameitems) {
		this.codigoExame = codigoExame;
		this.clientecolaborador = clientecolaborador;
		this.clientes = clientes;
		this.dataExame = dataExame;
		this.valorTotal = valorTotal;
		this.tipo = tipo;
		this.usuario = usuario;
		this.exameitems = exameitems;
	}

	@Id
	@GeneratedValue(generator="seq_exame", strategy=GenerationType.AUTO)
	@SequenceGenerator(name="seq_exame", sequenceName="seq_exame", initialValue=1)
	@Column(name = "codigo_exame", unique = true, nullable = false)
	public int getCodigoExame() {
		return this.codigoExame;
	}

	public void setCodigoExame(int codigoExame) {
		this.codigoExame = codigoExame;
	}

	@ManyToOne
	@JoinColumn(name = "codigo_colaborador", referencedColumnName = "codigo_colaborador")
	public BDClientecolaborador getClientecolaborador() {
		return this.clientecolaborador;
	}

	public void setClientecolaborador(BDClientecolaborador clientecolaborador) {
		this.clientecolaborador = clientecolaborador;
	}

	@ManyToOne
	@JoinColumn(name = "codigo_cliente", referencedColumnName = "codigo_cliente")
	public BDClientes getClientes() {
		return this.clientes;
	}

	public void setClientes(BDClientes clientes) {
		this.clientes = clientes;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "data_exame", length = 13)
	public Date getDataExame() {
		return this.dataExame;
	}

	public void setDataExame(Date dataExame) {
		this.dataExame = dataExame;
	}

	@Column(name = "valor_total", precision = 17, scale = 17)
	public float getValorTotal() {
		return this.valorTotal;
	}

	public void setValorTotal(float valorTotal) {
		this.valorTotal = valorTotal;
	}

	@Column(name = "tipo", length = 30)
	public String getTipo() {
		return this.tipo;
	}

	public void setTipo(String tipo) {
		this.tipo = tipo;
	}

	@Column(name = "usuario", length = 30)
	public String getUsuario() {
		return this.usuario;
	}

	public void setUsuario(String usuario) {
		this.usuario = usuario;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "exame")
	public Set<BDExameitem> getExameitems() {
		return this.exameitems;
	}

	public void setExameitems(Set<BDExameitem> exameitems) {
		this.exameitems = exameitems;
	}
	
	public String valorTot() {
		String valorFormat = "R$"+String.format("%.2f",valorTotal); //Formata o valor para ser mostrado na tabela
        return valorFormat;
	}
	
	public String dataFormat() {
		DateFormat formatar = new SimpleDateFormat("dd/MM/yyyy");
        String st= formatar.format(dataExame);
        return st;
	}

}


